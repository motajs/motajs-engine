import{_ as a,c as s,o as e,a2 as t}from"./chunks/framework.C2USoNCM.js";const c=JSON.parse('{"title":"UI 常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"guide/render-faq.md","filePath":"guide/render-faq.md"}'),n={name:"guide/render-faq.md"};function l(h,i,p,r,d,o){return e(),s("div",null,i[0]||(i[0]=[t(`<h1 id="ui-常见问题" tabindex="-1">UI 常见问题 <a class="header-anchor" href="#ui-常见问题" aria-label="Permalink to &quot;UI 常见问题&quot;">​</a></h1><h2 id="为什么我的-ui-不显示" tabindex="-1">为什么我的 UI 不显示？ <a class="header-anchor" href="#为什么我的-ui-不显示" aria-label="Permalink to &quot;为什么我的 UI 不显示？&quot;">​</a></h2><p>检查 UI 的纵深（zIndex）是否符合预期，有没有被其他元素遮挡；检查当前元素是否处于 <code>hidden</code> 状态。可以在控制台输入 <code>logTagTree()</code> 来输出当前的渲染树 <code>xml</code> 标签结构，会包含一些重要信息。</p><p>第二种可能性是你的元素处在了父元素范围之外，导致被裁剪掉。注意，<code>transform</code> 属性是对元素本身的变换，这也会导致元素本身的矩形范围发生变化，如果你的元素设置了缩放、旋转等，需要考虑此属性对位置的影响。</p><h2 id="为什么我的元素-onclick-事件没办法触发" tabindex="-1">为什么我的元素 onClick 事件没办法触发？ <a class="header-anchor" href="#为什么我的元素-onclick-事件没办法触发" aria-label="Permalink to &quot;为什么我的元素 onClick 事件没办法触发？&quot;">​</a></h2><p>可能你的元素被纵深更高的元素覆盖，导致事件无法传播至你的元素，考虑在纵深更高的元素上添加 <code>noevent</code> 标识来禁用它的事件传播。注意，一个纯透明的元素也可能会覆盖你的元素，仔细查看你的渲染树结构。</p><p>第二种可能性是其子元素拦截了冒泡或是其父元素拦截了捕获，检查 <code>e.stopPropagation</code> 调用情况。</p><h2 id="我的数据更新后-为什么渲染内容没有更新" tabindex="-1">我的数据更新后，为什么渲染内容没有更新？ <a class="header-anchor" href="#我的数据更新后-为什么渲染内容没有更新" aria-label="Permalink to &quot;我的数据更新后，为什么渲染内容没有更新？&quot;">​</a></h2><p>你可能在使用 <code>sprite</code> 元素，然后在渲染函数里面调用了外部数据，这样的话当外部数据更新时，你的 <code>sprite</code> 元素并不会自动更新，需要手动更新。手动更新参考代码：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Sprite } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@motajs/render&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mySprite</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sprite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据更新时，同时更新 sprite 元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySprite.value?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 mySprite 传入 ref 参数，这样当挂载完毕后就会将 mySprite.value 设置为该元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sprite</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{mySprite} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{render} /&gt;;</span></span></code></pre></div><p>除此之外还可能你的数据不是响应式数据，确保你的数据经过了 <code>reactive</code> 或 <code>ref</code> 包裹。</p><h2 id="玩着玩着突然黑屏了一下-然后画面就不显示了" tabindex="-1">玩着玩着突然黑屏了一下，然后画面就不显示了 <a class="header-anchor" href="#玩着玩着突然黑屏了一下-然后画面就不显示了" aria-label="Permalink to &quot;玩着玩着突然黑屏了一下，然后画面就不显示了&quot;">​</a></h2><p>你应该遇到了内存泄漏问题，当一个元素被卸载后，它应该会被销毁，但是如果没有被预期销毁，那么会导致内存泄漏，最终导致爆显存，就会导致画面黑屏一下，然后内容就会不显示。库本身已经针对这个问题进行了处理，一般情况下不会出现问题，出现这个问题时大概率是你自己的组件或 UI 有问题。可能原因有很多，例如你声明了一个列表，当组件挂载时将元素放入列表，但是当组件卸载时，你却没有将元素移除，这时候就会导致这个元素无法正确被垃圾回收，从而引起内存泄漏。</p><p>关于这个问题的最佳实践：</p><ul><li>如果你手动存储了一些元素，确保在卸载时将它们删除</li><li>在删除它们的同时，调用它们的 <code>destroy</code> 方法，来确保可以被垃圾回收</li><li>确保组件卸载时已经清空了定时器等内容</li><li>如果需要每帧执行函数，请使用 <code>onTick</code> 接口，而非其他方法</li></ul><h2 id="为什么我的滤镜不显示" tabindex="-1">为什么我的滤镜不显示？ <a class="header-anchor" href="#为什么我的滤镜不显示" aria-label="Permalink to &quot;为什么我的滤镜不显示？&quot;">​</a></h2><p>很遗憾，截止目前，IOS 依然没有支持 <code>CanvasRenderingContext2D</code> 上的 <code>filter</code> 方法，所有滤镜属性在 IOS 上将不会显示。不过，我们提供了 <code>Shader</code> 元素，它使用 <code>WebGL2</code> 接口，允许你制作自己的滤镜，如果滤镜是必要的，请考虑使用此元素，但是需要一定的图形学基础。</p><h2 id="不同设备的显示内容会不一样吗" tabindex="-1">不同设备的显示内容会不一样吗？ <a class="header-anchor" href="#不同设备的显示内容会不一样吗" aria-label="Permalink to &quot;不同设备的显示内容会不一样吗？&quot;">​</a></h2><p>从理论上来讲，除了上面那个问题提到的滤镜，其他的所有内容的渲染结果应该完全一致，如果出现了不一致的情况，请上报 bug。</p>`,19)]))}const g=a(n,[["render",l]]);export{c as __pageData,g as default};
