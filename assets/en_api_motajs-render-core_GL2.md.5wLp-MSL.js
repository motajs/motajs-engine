import{_ as l,C as h,c as r,o as t,j as i,b as p,a0 as d,a,w as e,G as k,a1 as o}from"./chunks/framework.DleKaMrY.js";const C=JSON.parse('{"title":"GL2 类 API 文档","description":"","frontmatter":{},"headers":[],"relativePath":"en/api/motajs-render-core/GL2.md","filePath":"en/api/motajs-render-core/GL2.md"}'),c={name:"en/api/motajs-render-core/GL2.md"};function g(E,s,y,u,F,b){const n=h("Mermaid");return t(),r("div",null,[s[1]||(s[1]=i("h1",{id:"gl2-类-api-文档",tabindex:"-1"},[a("GL2 类 API 文档 "),i("a",{class:"header-anchor",href:"#gl2-类-api-文档","aria-label":'Permalink to "GL2 类 API 文档"'},"​")],-1)),s[2]||(s[2]=i("p",null,[i("strong",null,"需丰富")],-1)),s[3]||(s[3]=i("p",null,[a("本文档由 "),i("code",null,"DeepSeek R1"),a(" 模型生成并微调。")],-1)),s[4]||(s[4]=i("h2",{id:"继承关系",tabindex:"-1"},[a("继承关系 "),i("a",{class:"header-anchor",href:"#继承关系","aria-label":'Permalink to "继承关系"'},"​")],-1)),(t(),p(o,null,{default:e(()=>[k(n,{id:"mermaid-12",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20GL2%20--%3E%20RenderItem%20--%3E%20EventEmitter%0A%0A%20%20%20%20click%20RenderItem%20%22.%2FRenderItem%22%0A%20%20%20%20click%20EventEmitter%20%22https%3A%2F%2Fnodejs.org%2Fapi%2Fevents.html%23class-eventemitter%22%0A"})]),fallback:e(()=>s[0]||(s[0]=[a(" Loading... ")])),_:1})),s[5]||(s[5]=d(`<hr><h2 id="属性说明" tabindex="-1">属性说明 <a class="header-anchor" href="#属性说明" aria-label="Permalink to &quot;属性说明&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>support</code></td><td><code>boolean</code>（静态）</td><td>检测 WebGL2 支持性</td><td>标识当前环境是否支持 WebGL2</td></tr><tr><td><code>canvas</code></td><td><code>HTMLCanvasElement</code></td><td>-</td><td>绑定的 WebGL2 画布元素</td></tr><tr><td><code>gl</code></td><td><code>WebGL2RenderingContext</code></td><td>-</td><td>WebGL2 渲染上下文</td></tr><tr><td><code>UNIFORM_1f</code> ~ <code>UNIFORM_4uiv</code></td><td><code>UniformType</code> 枚举</td><td>对应枚举值</td><td>WebGL uniform 类型常量（共 25 种）</td></tr><tr><td><code>U_MATRIX_2x2</code> ~ <code>U_MATRIX_4x4</code></td><td><code>UniformMatrix</code> 枚举</td><td>对应枚举值</td><td>矩阵类型 uniform 常量（9 种）</td></tr><tr><td><code>ATTRIB_1f</code> ~ <code>ATTRIB_I4uiv</code></td><td><code>AttribType</code> 枚举</td><td>对应枚举值</td><td>顶点属性类型常量（12 种）</td></tr><tr><td><code>MAX_TEXTURE_COUNT</code></td><td><code>number</code></td><td><code>0</code></td><td>最大纹理支持数量（实际值由 WebGL 上下文决定）</td></tr></tbody></table><hr><h2 id="构造方法" tabindex="-1">构造方法 <a class="header-anchor" href="#构造方法" aria-label="Permalink to &quot;构造方法&quot;">​</a></h2><h3 id="constructor" tabindex="-1"><code>constructor</code> <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;\`constructor\`&quot;">​</a></h3><p><strong>参数</strong></p><ul><li><code>type</code>: 渲染模式（<code>absolute</code> 绝对定位 / <code>static</code> 跟随摄像机）</li></ul><p><strong>行为</strong></p><ul><li>初始化 WebGL2 上下文</li><li>自动检测 WebGL2 支持性（通过静态属性 <code>support</code>）</li><li>设置默认渲染模式</li></ul><hr><h2 id="方法说明" tabindex="-1">方法说明 <a class="header-anchor" href="#方法说明" aria-label="Permalink to &quot;方法说明&quot;">​</a></h2><h3 id="createprogram" tabindex="-1"><code>createProgram</code> <a class="header-anchor" href="#createprogram" aria-label="Permalink to &quot;\`createProgram\`&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GL2Program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    Program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProgramConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    vs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>描述</strong><br> 创建 WebGL 着色器程序<br><strong>参数</strong></p><ul><li><code>Program</code>: 着色器程序类（需继承 <code>GL2Program</code>）</li><li><code>vs</code>: 自定义顶点着色器代码（可选）</li><li><code>fs</code>: 自定义片元着色器代码（可选）<br><strong>示例</strong></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyProgram</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GL2Program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyProgram);</span></span></code></pre></div><hr><h3 id="useprogram" tabindex="-1"><code>useProgram</code> <a class="header-anchor" href="#useprogram" aria-label="Permalink to &quot;\`useProgram\`&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GL2Program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>描述</strong><br> 切换当前使用的着色器程序<br><strong>示例</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shaderProgram);</span></span></code></pre></div><hr><h3 id="framebuffer" tabindex="-1"><code>framebuffer</code> <a class="header-anchor" href="#framebuffer" aria-label="Permalink to &quot;\`framebuffer\`&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> framebuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    texture</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IShaderTexture2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    clear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>描述</strong><br> 将渲染结果输出到帧缓冲纹理<br><strong>参数</strong></p><ul><li><code>name</code>: 帧缓冲名称</li><li><code>texture</code>: 目标纹理对象</li><li><code>clear</code>: 是否清空画布</li></ul><hr><h3 id="drawscene-抽象方法" tabindex="-1"><code>drawScene</code>（抽象方法） <a class="header-anchor" href="#drawscene-抽象方法" aria-label="Permalink to &quot;\`drawScene\`（抽象方法）&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> drawScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    canvas</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MotaOffscreenCanvas2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    gl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebGL2RenderingContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GL2Program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    transform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Transform</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>描述</strong><br> 抽象渲染方法，子类必须实现具体绘制逻辑</p><hr><h2 id="静态方法说明" tabindex="-1">静态方法说明 <a class="header-anchor" href="#静态方法说明" aria-label="Permalink to &quot;静态方法说明&quot;">​</a></h2><h3 id="gl2-support" tabindex="-1"><code>GL2.support</code> <a class="header-anchor" href="#gl2-support" aria-label="Permalink to &quot;\`GL2.support\`&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">static readonly </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">support</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean;</span></span></code></pre></div><p><strong>描述</strong><br> 静态只读属性，检测 WebGL2 支持性<br><strong>示例</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GL2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.support) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 初始化 WebGL2 功能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="总使用示例" tabindex="-1">总使用示例 <a class="header-anchor" href="#总使用示例" aria-label="Permalink to &quot;总使用示例&quot;">​</a></h2><p>暂时没有。</p>`,40))])}const v=l(c,[["render",g]]);export{C as __pageData,v as default};
