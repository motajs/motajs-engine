import{_ as n,C as e,c as l,o as i,a2 as p,b as h,w as a,a as r,G as k,a3 as d}from"./chunks/framework.DwfRUtaX.js";const F=JSON.parse('{"title":"函数 API 文档","description":"","frontmatter":{},"headers":[],"relativePath":"api/motajs-render-core/functions.md","filePath":"api/motajs-render-core/functions.md"}'),o={name:"api/motajs-render-core/functions.md"};function g(c,s,E,y,u,m){const t=e("Mermaid");return i(),l("div",null,[s[1]||(s[1]=p('<h1 id="函数-api-文档" tabindex="-1">函数 API 文档 <a class="header-anchor" href="#函数-api-文档" aria-label="Permalink to &quot;函数 API 文档&quot;">​</a></h1><p>本文档由 <code>DeepSeek R1</code> 模型生成并微调。</p><hr><h2 id="函数说明" tabindex="-1">函数说明 <a class="header-anchor" href="#函数说明" aria-label="Permalink to &quot;函数说明&quot;">​</a></h2><h3 id="iswebglsupported" tabindex="-1"><code>isWebGLSupported</code> <a class="header-anchor" href="#iswebglsupported" aria-label="Permalink to &quot;`isWebGLSupported`&quot;">​</a></h3><p><strong>功能</strong><br> 检测浏览器是否支持 WebGL 1.0<br><strong>返回值</strong></p><ul><li><code>true</code>: 支持</li><li><code>false</code>: 不支持</li></ul><p><strong>示例</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isWebGLSupported</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 初始化 WebGL 1.0 功能</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="iswebgl2supported" tabindex="-1"><code>isWebGL2Supported</code> <a class="header-anchor" href="#iswebgl2supported" aria-label="Permalink to &quot;`isWebGL2Supported`&quot;">​</a></h3><p><strong>功能</strong> 检测浏览器是否支持 WebGL 2.0<br><strong>返回值</strong></p><ul><li><code>true</code>: 支持</li><li><code>false</code>: 不支持</li></ul><hr><h3 id="addtiming" tabindex="-1"><code>addTiming</code> <a class="header-anchor" href="#addtiming" aria-label="Permalink to &quot;`addTiming`&quot;">​</a></h3><p><strong>功能</strong> 组合两个缓动函数为加法函数<br><strong>数学表达</strong><code>newTiming(p) = timing1(p) + timing2(p)</code></p><p><strong>参数</strong></p><ul><li><code>timing1</code>: 第一个缓动函数</li><li><code>timing2</code>: 第二个缓动函数</li></ul><p><strong>示例</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bounce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> combined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addTiming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(linear, bounce); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p + p²</span></span></code></pre></div><hr><h3 id="multiplytiming" tabindex="-1"><code>multiplyTiming</code> <a class="header-anchor" href="#multiplytiming" aria-label="Permalink to &quot;`multiplyTiming`&quot;">​</a></h3><p><strong>功能</strong><br> 组合两个缓动函数为乘法函数<br><strong>数学表达</strong><br><code>newTiming(p) = timing1(p) * timing2(p)</code></p><hr><h3 id="issetequal" tabindex="-1"><code>isSetEqual</code> <a class="header-anchor" href="#issetequal" aria-label="Permalink to &quot;`isSetEqual`&quot;">​</a></h3><p><strong>功能</strong><br> 判断两个集合是否相等（元素完全相同）<br><strong>实现逻辑</strong></p><ol><li>直接引用相同 → <code>true</code></li><li>大小不同 → <code>false</code></li><li>检查 set1 是否是 set2 的子集</li></ol><hr><h3 id="transformcanvas" tabindex="-1"><code>transformCanvas</code> <a class="header-anchor" href="#transformcanvas" aria-label="Permalink to &quot;`transformCanvas`&quot;">​</a></h3><p><strong>功能</strong><br> 将变换矩阵应用到画布上下文<br><strong>实现逻辑</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transform.mat; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 3x3 矩阵</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mat; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分解为 2D 变换参数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b, c, d, e, f); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应用变换</span></span></code></pre></div><p><strong>参数</strong></p><ul><li><code>canvas</code>: 目标画布对象</li><li><code>transform</code>: 变换矩阵</li></ul><p><strong>示例</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transformCanvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCanvas, transform); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应用平移变换</span></span></code></pre></div><hr><h2 id="工具函数关系图" tabindex="-1">工具函数关系图 <a class="header-anchor" href="#工具函数关系图" aria-label="Permalink to &quot;工具函数关系图&quot;">​</a></h2>',37)),(i(),h(d,null,{default:a(()=>[k(t,{id:"mermaid-139",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20checkSupport%20--%3E%20isWebGLSupported%0A%20%20%20%20checkSupport%20--%3E%20isWebGL2Supported%0A%20%20%20%20addTiming%20--%3E%20%E7%BB%84%E5%90%88%E7%BC%93%E5%8A%A8%E5%87%BD%E6%95%B0%0A%20%20%20%20multiplyTiming%20--%3E%20%E7%BB%84%E5%90%88%E7%BC%93%E5%8A%A8%E5%87%BD%E6%95%B0%0A%20%20%20%20isSetEqual%20--%3E%20%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%0A%20%20%20%20transformCanvas%20--%3E%20%E7%9F%A9%E9%98%B5%E5%8F%98%E6%8D%A2%0A"})]),fallback:a(()=>s[0]||(s[0]=[r(" Loading... ")])),_:1}))])}const C=n(o,[["render",g]]);export{F as __pageData,C as default};
