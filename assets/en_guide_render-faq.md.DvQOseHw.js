import{_ as i,c as s,o as t,a0 as n}from"./chunks/framework.DleKaMrY.js";const k=JSON.parse('{"title":"Rendering System FAQ","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/render-faq.md","filePath":"en/guide/render-faq.md"}'),a={name:"en/guide/render-faq.md"};function r(l,e,o,h,d,p){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="rendering-system-faq" tabindex="-1">Rendering System FAQ <a class="header-anchor" href="#rendering-system-faq" aria-label="Permalink to &quot;Rendering System FAQ&quot;">​</a></h1><p><em>This document is translated by DeepSeek.</em></p><h2 id="why-is-my-rendered-content-not-displaying" tabindex="-1">Why is my rendered content not displaying? <a class="header-anchor" href="#why-is-my-rendered-content-not-displaying" aria-label="Permalink to &quot;Why is my rendered content not displaying?&quot;">​</a></h2><p>Check if the element&#39;s <code>zIndex</code> is as expected and whether it&#39;s being obscured by other elements. Also, verify if the element is in a <code>hidden</code> state.</p><p>Another possibility is that the element is outside its parent&#39;s bounds, causing it to be clipped. Note that the <code>transform</code> property affects the element&#39;s own coordinate space—if scaling, rotation, or other transformations are applied, consider how these may impact positioning.</p><h2 id="why-isn-t-my-element-s-onclick-event-triggering" tabindex="-1">Why isn&#39;t my element&#39;s <code>onClick</code> event triggering? <a class="header-anchor" href="#why-isn-t-my-element-s-onclick-event-triggering" aria-label="Permalink to &quot;Why isn&#39;t my element&#39;s \`onClick\` event triggering?&quot;">​</a></h2><p>Your element might be overlapped by another element with a higher <code>zIndex</code>, preventing event propagation. Try adding a <code>noevent</code> flag to the overlapping element to disable its events. Note that even a fully transparent element can block events, so inspect your render tree structure carefully.</p><p>Alternatively, event propagation might be interrupted by <code>e.stopPropagation()</code> in either child (bubbling phase) or parent (capturing phase) elements.</p><h2 id="why-doesn-t-the-rendered-content-update-when-my-data-changes" tabindex="-1">Why doesn&#39;t the rendered content update when my data changes? <a class="header-anchor" href="#why-doesn-t-the-rendered-content-update-when-my-data-changes" aria-label="Permalink to &quot;Why doesn&#39;t the rendered content update when my data changes?&quot;">​</a></h2><p>If you&#39;re using a <code>sprite</code> element and referencing external data in its render function, updates won&#39;t trigger automatically. Manual updates are required:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Sprite } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@motajs/client&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mySprite</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sprite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Update the sprite when data changes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySprite.value?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pass the ref to the sprite element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sprite</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{mySprite} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{render} /&gt;;</span></span></code></pre></div><p>Also, ensure your data is wrapped with <code>reactive</code> or <code>ref</code> for reactivity.</p><h2 id="the-screen-flickers-black-then-content-disappears" tabindex="-1">The screen flickers black, then content disappears <a class="header-anchor" href="#the-screen-flickers-black-then-content-disappears" aria-label="Permalink to &quot;The screen flickers black, then content disappears&quot;">​</a></h2><p>This likely indicates a memory leak. When elements are unmounted, they should be destroyed. If not, GPU memory may exhaust, causing a black screen. The library handles most cases, but leaks often stem from custom components—for example:</p><ul><li>Storing elements in a list but failing to remove them on unmount.</li><li>Not clearing timers or animation loops.</li></ul><p><strong>Best practices:</strong></p><ul><li>Remove manually stored elements on unmount.</li><li>Call <code>destroy()</code> on elements to ensure garbage collection.</li><li>Clear timers/intervals.</li><li>For frame-based logic, use <code>onTick</code> instead of manual loops.</li></ul><h2 id="why-isn-t-my-filter-effect-visible" tabindex="-1">Why isn&#39;t my filter effect visible? <a class="header-anchor" href="#why-isn-t-my-filter-effect-visible" aria-label="Permalink to &quot;Why isn&#39;t my filter effect visible?&quot;">​</a></h2><p>As of now, iOS still doesn’t support the <code>filter</code> property on <code>CanvasRenderingContext2D</code>. Filters won’t render on iOS devices. However, the <code>Shader</code> element (using WebGL2) allows custom filter implementation—though this requires graphics programming knowledge.</p><h2 id="will-rendering-differ-across-devices" tabindex="-1">Will rendering differ across devices? <a class="header-anchor" href="#will-rendering-differ-across-devices" aria-label="Permalink to &quot;Will rendering differ across devices?&quot;">​</a></h2><p>Theoretically, aside from the iOS filter limitation, all rendering should be consistent. Report bugs if discrepancies occur.</p>`,21)]))}const g=i(a,[["render",r]]);export{k as __pageData,g as default};
